# services/gateway/Dockerfile.prod
# Multi-stage build for production optimization
FROM node:18-alpine AS builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++ libc6-compat

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install ALL dependencies (including dev)
RUN npm ci

# Copy shared dependencies
COPY ../../shared ./shared

# Copy source code
COPY src ./src

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

WORKDIR /app

# Install runtime dependencies only
RUN apk add --no-cache libc6-compat

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/shared ./shared

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S stratosmesh -u 1001

# Change ownership
RUN chown -R stratosmesh:nodejs /app

# Switch to non-root user
USER stratosmesh

# Create health check script
COPY <<EOF /app/healthcheck.js
const http = require('http');
const options = {
  host: 'localhost',
  port: process.env.PORT || 3000,
  path: '/health',
  timeout: 2000,
};
const request = http.request(options, (res) => {
  console.log('STATUS: ' + res.statusCode);
  process.exit(res.statusCode == 200 ? 0 : 1);
});
request.on('error', (err) => {
  console.log('ERROR', err);
  process.exit(1);
});
request.end();
EOF

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node healthcheck.js

EXPOSE 3000

CMD ["node", "dist/server.js"]
