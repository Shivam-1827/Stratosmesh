
services:
  # Infrastructure Services
  mongodb:
    image: mongo:7
    container_name: stratosmesh-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped
    networks:
      - stratosmesh-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: stratosmesh-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    networks:
      - stratosmesh-network

  redis:
    image: redis:7-alpine
    container_name: stratosmesh-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - stratosmesh-network

  # Core Application Services
  auth-service:
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    container_name: stratosmesh-auth
    ports:
      - "50051:50051"
    environment:
      - NODE_ENV=development
      - PORT=50051
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/stratosmesh?authSource=admin
      - JWT_SECRET=5e6025eaa2bdbe6cbd0567496e362a36
      - JWT_REFRESH_SECRET=19eb1d9be04e3ff00b503e34bb2b53ae
    volumes:
      - ./services/auth-service/src:/app/services/auth-service/src:ro
      - ./shared:/app/shared:ro
      - /app/node_modules
    depends_on:
      - mongodb
    restart: unless-stopped
    networks:
      - stratosmesh-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  tenant-manager:
    build:
      context: .
      dockerfile: services/tenant-manager/Dockerfile
    container_name: stratosmesh-tenant
    ports:
      - "50054:50054"
    environment:
      - NODE_ENV=development
      - PORT=50054
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/stratosmesh?authSource=admin
    volumes:
      - ./services/tenant-manager/src:/app/services/tenant-manager/src:ro
      - ./shared:/app/shared:ro
      - /app/node_modules
    depends_on:
      - mongodb
      - auth-service
    restart: unless-stopped
    networks:
      - stratosmesh-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NEW: LLM Processor Service
  llm-processor:
    build:
      context: .
      dockerfile: services/llm-processor/Dockerfile
    container_name: stratosmesh-llm-processor
    ports:
      - "50056:50056"
    environment:
      - NODE_ENV=development
      - PORT=50056
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/stratosmesh?authSource=admin
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - MAX_FILE_SIZE=100MB
      - PROCESSING_TIMEOUT=300000
    volumes:
      - ./services/llm-processor/src:/app/services/llm-processor/src:ro
      - ./shared:/app/shared:ro
      - /app/node_modules
      # Temporary file storage for large file processing
      - llm_temp_storage:/app/temp
    depends_on:
      - mongodb
    restart: unless-stopped
    networks:
      - stratosmesh-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  stream-ingestion:
    build:
      context: .
      dockerfile: services/stream-ingestion/Dockerfile
    container_name: stratosmesh-stream
    ports:
      - "50052:50052"
    environment:
      - NODE_ENV=development
      - PORT=50052
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/stratosmesh?authSource=admin
      - RABBITMQ_URI=amqp://admin:password@rabbitmq:5672
      - REDIS_URI=redis://redis:6379
      - LLM_PROCESSOR_URI=llm-processor:50056  # NEW: LLM processor connection
    volumes:
      - ./services/stream-ingestion/src:/app/services/stream-ingestion/src:ro
      - ./shared:/app/shared:ro
      - ./workers:/app/workers:ro
      - /app/node_modules
    depends_on:
      - mongodb
      - rabbitmq
      - redis
      - llm-processor  # NEW: Dependency on LLM processor
    restart: unless-stopped
    networks:
      - stratosmesh-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  strategy-engine:
    build:
      context: .
      dockerfile: services/strategy-engine/Dockerfile
    container_name: stratosmesh-strategy
    ports:
      - "50053:50053"
    environment:
      - NODE_ENV=development
      - PORT=50053
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/stratosmesh?authSource=admin
      - RABBITMQ_URI=amqp://admin:password@rabbitmq:5672
      - WORKER_POOL_MIN=2
      - WORKER_POOL_MAX=10
      # AI/ML specific environment variables
      - TENSORFLOW_BACKEND=cpu
      - NODE_OPTIONS=--max_old_space_size=4096
    volumes:
      - ./services/strategy-engine/src:/app/services/strategy-engine/src:ro
      - ./shared:/app/shared:ro
      - ./workers:/app/workers:ro
      - /app/node_modules
      # AI model cache
      - ai_model_cache:/app/models
    depends_on:
      - mongodb
      - rabbitmq
      - stream-ingestion
    restart: unless-stopped
    networks:
      - stratosmesh-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  notification:
    build:
      context: .
      dockerfile: services/notification/Dockerfile
    container_name: stratosmesh-notification
    ports:
      - "50055:50055"
    environment:
      - NODE_ENV=development
      - PORT=50055
      - RABBITMQ_URI=amqp://admin:password@rabbitmq:5672
      - JWT_SECRET=5e6025eaa2bdbe6cbd0567496e362a36
      - WEBSOCKET_MAX_CONNECTIONS=10000
      - REDIS_URI=redis://redis:6379  # For scaling WebSocket connections
    volumes:
      - ./services/notification/src:/app/services/notification/src:ro
      - ./shared:/app/shared:ro
      - ./workers:/app/workers:ro
      - /app/node_modules
    depends_on:
      - rabbitmq
      - redis
      - strategy-engine
    restart: unless-stopped
    networks:
      - stratosmesh-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Enhanced Gateway with LLM support
  gateway:
    build:
      context: .
      dockerfile: services/gateway/Dockerfile
    container_name: stratosmesh-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - AUTH_SERVICE_URI=auth-service:50051
      - TENANT_SERVICE_URI=tenant-manager:50054
      - STREAM_SERVICE_URI=stream-ingestion:50052
      - STRATEGY_SERVICE_URI=strategy-engine:50053
      - NOTIFICATION_SERVICE_URI=notification:50055
      - LLM_PROCESSOR_URI=llm-processor:50056  # NEW: LLM processor URI
      - MAX_UPLOAD_SIZE=100mb
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
    volumes:
      - ./services/gateway/src:/app/services/gateway/src:ro
      - ./shared:/app/shared:ro
      - /app/node_modules
      # Temporary upload storage
      - gateway_uploads:/app/uploads
    depends_on:
      - auth-service
      - tenant-manager
      - strategy-engine
      - stream-ingestion
      - notification
      - llm-processor  # NEW: Dependency on LLM processor
    restart: unless-stopped
    networks:
      - stratosmesh-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: stratosmesh-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - stratosmesh-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: stratosmesh-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - stratosmesh-network
    profiles:
      - monitoring

# Networks
networks:
  stratosmesh-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  mongodb_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  llm_temp_storage:  # NEW: For LLM processor temporary files
    driver: local
  ai_model_cache:    # NEW: For caching AI models
    driver: local
  gateway_uploads:   # NEW: For gateway file uploads
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
